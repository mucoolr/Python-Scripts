import boto3

def check_eks_clusters_with_namespace(region, namespace):
    # Create an EKS client in the specified region
    eks_client = boto3.client('eks', region_name=region)

    # List all EKS clusters in the region
    response = eks_client.list_clusters()
    clusters = response['clusters']

    # Check each cluster for the specified namespace
    clusters_with_namespace = []
    for cluster_name in clusters:
        if check_eks_cluster_with_namespace(eks_client, cluster_name, namespace):
            clusters_with_namespace.append(cluster_name)

    return clusters_with_namespace

def check_eks_cluster_with_namespace(eks_client, cluster_name, namespace):
    # Describe the EKS cluster
    response = eks_client.describe_cluster(name=cluster_name)
    cluster = response['cluster']

    # Check if the cluster has the specified namespace
    if 'resourcesVpcConfig' in cluster:
        security_group_id = cluster['resourcesVpcConfig']['clusterSecurityGroupId']
        ec2_client = boto3.client('ec2')

        # Describe the security group to get the associated VPC
        response = ec2_client.describe_security_groups(GroupIds=[security_group_id])
        vpc_id = response['SecurityGroups'][0]['VpcId']

        # Describe the VPC to check for the specified namespace
        response = ec2_client.describe_vpcs(VpcIds=[vpc_id])
        vpcs = response['Vpcs']

        if vpcs:
            vpc_tags = vpcs[0]['Tags']

            # Check if the VPC has the specified namespace
            for tag in vpc_tags:
                if tag['Key'] == 'kubernetes.io/cluster/{0}'.format(cluster_name) and tag['Value'] == namespace:
                    return True

    return False

# Usage example
region = 'us-west-2'  # Specify the desired region here
namespace = 'production'

clusters_with_namespace = check_eks_clusters_with_namespace(region, namespace)
print(f"Clusters with the namespace '{namespace}': {clusters_with_namespace}")
